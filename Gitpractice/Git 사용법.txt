파일명: Git 사용법.txt


# Git

- .git 폴더가 위치한 폴더의 모든 내용을 관리해주는 프로그램
- .git 폴더를 추가한 위치를 레포지토리(Repository)라고 부른다.
- .git 폴더 내부에는 해당 레포지토리의 모든 정보가 기록되어 있다.
  (변경 이력, 복원 지점 등등...)
- Git은 .git 폴더 내부의 정보를 활용하여 언제든지 해당 레포지토리를 원하는 시점의 모습으로 변경할 수 있다,
- Eclipse에서는 Eclipse에 내장된 내장된 Git을 활용할 수 있다.

# 이클립스의 새 프로젝트를 레포지토리로 만들기

- 레포지토리 화면 보기 : Windows -> Show View -> others -> Git -> Git Repositories
- 새 프로젝트 우클릭 -> Team -> Share Project -> 경로 잘 설정...
- 해당 위치에 .git 폴더 생긴거 확인하기 (탐색기 -> 보기 -> 숨긴 항복 체크)

# Commit

- 레포지토리의 변경 사항을 확정짓는 명령어
- 커밋한 시점은 복원 지점으로 사용될 수 있다.
- 체크 아웃을 통해 언제든지 원하는 상태로 레포지토리를 변경할 수 있다.
- 체크 아웃시에는 커밋을 하지 않은 내용은 다시 복구할 수 없다.

# staged와 unstaged 상태

- 가장 최근 커밋 이후 변경된 내역이 있는 파일들은 모두 unstaged 상태가 된다.
- unstaged 상태인 레포지토리 내부의 파일들 중에 이번 커밋에 함께 포함시키고 싶은(확정짓고싶은) 파일들을 선택하여 staged 상태로 변경한 후 커밋을 진행할 수 있다.
- 아직 미완성인 파일들은 unstaged 상태로 두어서 커밋에 포함시키지 않는것이 좋다.

# History

- 레포지토리에서 일어났던 일들을 볼 수 있는 기능
- 레포지토리 우클릭 -> Show In -> History
- 파일 또는 프로젝트에 커서를 두면 해당 커서만의 History를 볼 수 있다.
- History를 보면서 언제든 원하는 커밋을 체크아웃 할 수 있다.
- 과거의 커밋으로 체크 아웃한 상태여서 무언가를 변경하기 위해서는 새로운 브랜치 생성이 필요하다.(브랜치 없이 무언가를 과거에서 변경하면 보존되지 않는다.)

# HEAD

- 내가 현재 보고 있는 커밋
- 언제든지 체크 아웃을 통해 헤드를 변경 할 수 있다.

# .gitignore

- stage에 포함시키고 싶지 않은 파일 목록들을 적어놓는 곳
- .gitignore 파일에 등록해놓은 이름을 가진 파일들은 Git이 무시하게 된다.

# Branch

- 하나의 레포지토리를 다양한 형태로 보존하기 위한 기능
- 여러 브랜치가 있어야 하나의 커밋으로 부터 여러가지 형태로 뻗어나갈 수 있다.


# Merge

- 한 브랜치에 다른 브랜치의 내용을 합치면서 커밋을 생성하는 것
- 현재 브랜치를 과거에 머물고 있던 브랜치에 합치는 것은 그냥 앞으로 땡기는 효과밖에 없다 (fast-forward)
- Eclipse에서는 현재 체크 아웃된 브랜치에 다른 브랜치를 우클릭하여 합치는 방식으로 적용할 수 있다.
- 만약 현재 브랜치와 합치려는 브랜치에 불일치가 존재하는 경우 어느 브랜치의 의견을 따를 것인지 결정할 수 있는 충돌이라는 과정이 추가된다.
- 충돌이 발생한 경우 스테이지에 충돌된 파일이 올라가 있고 해당 충돌을 해결하기 전까지는 머지로 인한 새로운 커밋이 생성되지 않는다.
- 충돌 상황을 잘 해결한 후 마저 커밋을 진행하면 머지가 완료된다.

# Github

- Git을 온라인에 올려놓고 함께 사용하는 기능을 제공하는 사이트
- Github는 Git의 공식 사이트가 아니라 가장 유명한 깃 커뮤니티 중 하나일 뿐이다.
- 내 컴퓨터에 존재하는 레포지토리를 로컬 레포지토리라고 부르고, 로컬 레포지토리를 멀리 있는 다른 컴퓨터에 보관하는 것을 원격 레포지토리라고 부른다.
- Github는 원격 레포지토리를 보관 할 수 있는 저장 공간을 제공하는 것 뿐이다.
- 팀 단위로 작업을 진행하기 위해서 하나의 원격 레포지토리를 생성해 두고 모든 팀원들이 각자의 로컬 레포지토리로 복사하여 프로젝트를 진행한다.
- Github에서 함께 팀 작업을 하기 위해서는 팀원들을 Collaborator로 등록해야 한다.

# push

- 로컬 레포지토리의 특정 브랜치를 원격 레포지토리에 업데이트 하는 것

# pull

- 원격 레포지토리의 특정 브랜치를 로컬 레포지토리에 업데이트 하는 것

# clone

- 원격 레포지토리를 로컬에 그대로 복사하는 것

